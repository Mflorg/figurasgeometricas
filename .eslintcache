[{"C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\index.js":"1","C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\reportWebVitals.js":"2","C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\App.js":"3","C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\db\\data.js":"4","C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\components\\ListShapes.js":"5","C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\components\\InsertShape.js":"6","C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\components\\FilterShape.js":"7"},{"size":563,"mtime":1610132421522,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1607209126152,"results":"10","hashOfConfig":"9"},{"size":421,"mtime":1610172319663,"results":"11","hashOfConfig":"9"},{"size":448,"mtime":1610134315237,"results":"12","hashOfConfig":"9"},{"size":7191,"mtime":1610171689998,"results":"13","hashOfConfig":"9"},{"size":2773,"mtime":1610195416350,"results":"14","hashOfConfig":"9"},{"size":1786,"mtime":1610194958001,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"4k324l",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\index.js",[],["32","33"],"C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\reportWebVitals.js",[],"C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\App.js",[],"C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\db\\data.js",[],"C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\components\\ListShapes.js",["34"],"import React, { useEffect, useState } from 'react'\r\nimport { shapes } from '../db/data'\r\nimport InsertShape from './InsertShape'\r\nimport { Modal, ModalBody, ModalHeader, ModalFooter } from 'reactstrap';\r\nimport Swal from 'sweetalert2'\r\nimport FilterShape from './FilterShape'\r\n\r\nfunction ListShapes() {\r\n    const [data, setData] = useState(shapes)\r\n    const [edit, setEdit] = useState(false)\r\n    const [id, setId] = useState('')\r\n    const [nameE, setNameE] = useState('')\r\n    const [side, setSide] = useState('')\r\n    const [ins, setIns] = useState(false)\r\n    const [newArray, setNewArray]=useState('')\r\n    const [flagSearch, setFlagSearch]=useState(false)\r\n    \r\n    useEffect(() => {\r\n    \r\n        setIns(false)\r\n    }, [ins])\r\n\r\n\r\n    const addShape = (shape) => {\r\n        //this function add a new shape\r\n        const newData = data\r\n        newData.push(shape)\r\n        setData(newData)\r\n        setIns(true)\r\n        setFlagSearch(false)\r\n    }\r\n\r\n    const removeItem = id => {\r\n        //this function remove a shape selected\r\n  \r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be able to revert this!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, I am sure!'\r\n        }).then((result) => {\r\n            console.log(id)\r\n            setData(data.filter(dat => dat.id !== id))\r\n            setFlagSearch(false)\r\n        \r\n\r\n            if (result.isConfirmed) {\r\n                Swal.fire({\r\n                    position: 'center',\r\n                    icon: 'success',\r\n                    title: 'Your shape has been deleted',\r\n                    showConfirmButton: false,\r\n                    timer: 1500\r\n                })\r\n                \r\n            }\r\n        })\r\n       \r\n\r\n    }\r\n\r\n    const selectItem = (shape) => {\r\n        //this fuction capture information of the shape selected\r\n        setEdit(true)\r\n        setId(shape.id)\r\n        setSide(shape.side)\r\n        setNameE(shape.name)\r\n\r\n    }\r\n\r\n    const editShape = () => {\r\n        //this function update to the shape selected\r\n        const newData = data\r\n        newData.map(shape => {\r\n            if (shape.id === id) {\r\n                shape.name = nameE;\r\n                shape.side = side\r\n            }\r\n        })\r\n        setFlagSearch(false)\r\n        setData(newData)\r\n    }\r\n\r\n    const handlserSearch=(dataS)=>{\r\n        \r\n        if(dataS.length>0){\r\n            setFlagSearch(true)\r\n            setNewArray(dataS)\r\n\r\n        }\r\n    }\r\n\r\n    //this variable show information in the screen\r\n    const loadData =flagSearch && newArray.length>0 ? newArray.map((shape, i) => {\r\n            return (\r\n                <div className=\"col-md-4\" key={i}>\r\n                    <div className=\"card hover mt-4\" key={shape.id}>\r\n                        {/* <img className=\"card-img-top medium\" src={shape.image} alt={shape.name}/> */}\r\n                        <div className=\"card-body\">\r\n                            <h2>{shape.name}</h2>\r\n                            <div className=\"lines\">Side's Number: {shape.side}</div>\r\n                            <div className=\"buttons\">\r\n                                <button className=\"btn btn-primary\" onClick={() => selectItem(shape)}>Edit</button> {' '}\r\n                                <button className=\"btn btn-danger\" onClick={() => removeItem(shape.id)}>Delete</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n        :\r\n        data.map((shape, i) => {\r\n            return (\r\n                <div className=\"col-md-4\" key={i}>\r\n                    <div className=\"card hover mt-4\" key={shape.id}>\r\n                        {/* <img className=\"card-img-top medium\" src={shape.image} alt={shape.name}/> */}\r\n                        <div className=\"card-body\">\r\n                            <h2>{shape.name}</h2>\r\n                            <div className=\"lines\">Side's Number: {shape.side}</div>\r\n                            <div className=\"buttons\">\r\n                                <button className=\"btn btn-primary\" onClick={() => selectItem(shape)}>Edit</button> {' '}\r\n                                <button className=\"btn btn-danger\" onClick={() => removeItem(shape.id)}>Delete</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row mt-4\">\r\n                <div className=\"col-md-3\">\r\n                    <FilterShape data={data} search={handlserSearch}/>\r\n                    <InsertShape addShape={addShape} />\r\n\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                    <div className=\"row center\">\r\n                        {loadData}\r\n\r\n                    </div>\r\n                </div >\r\n            </div >\r\n            <Modal isOpen={edit}>\r\n                <ModalHeader>\r\n                    <div>\r\n                        <h3>\r\n                            Edit you Shape\r\n                        </h3>\r\n                    </div>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                            placeholder=\"Insert Shape...\"\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            onChange={e => setNameE(e.target.value)}\r\n                            name=\"name\"\r\n                            value={nameE} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label className=\"label\"> The Sides are: {side} </label>\r\n                        <select className=\"form-control\"\r\n                            onChange={e => setSide(e.target.value)}\r\n                            name=\"side\">\r\n                            <option value=\"\">select</option>\r\n                            <option value={1}>One</option>\r\n                            <option value={2}>Two</option>\r\n                            <option value={3}>Three</option>\r\n                            <option value={4}>Four</option>\r\n                            <option value={5}>Five</option>\r\n                            <option value={6}>Six</option>\r\n                            <option value={7}>Seven</option>\r\n                            <option value={8}>Eight</option>\r\n                            <option value={9}>Nine</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <div className=\"button\">\r\n                        <button className=\"btn btn-primary \" onClick={() => { setEdit(false); editShape() }}>\r\n                            Save\r\n                </button>\r\n                    </div>\r\n\r\n                </ModalFooter>\r\n\r\n            </Modal>\r\n\r\n        </div >\r\n    )\r\n\r\n}\r\n\r\nexport default ListShapes","C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\components\\InsertShape.js",["35"],"C:\\Users\\mfgsn\\Documents\\herryChallenge\\ENTREVISTAS\\Entrevistas técnicas frontend\\Scrummers\\figurasgeometricas\\src\\components\\FilterShape.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":77,"column":27,"nodeType":"42","messageId":"43","endLine":77,"endColumn":29},{"ruleId":"44","severity":1,"message":"45","line":12,"column":8,"nodeType":"46","endLine":12,"endColumn":20,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'obtId'. Either include it or remove the dependency array.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [obtId, shape.name]",{"range":"53","text":"54"},[244,256],"[obtId, shape.name]"]